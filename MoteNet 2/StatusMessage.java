/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'StatusMessage'
 * message type.
 */

public class StatusMessage extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 12;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 6;

    /** Create a new StatusMessage of size 12. */
    public StatusMessage() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new StatusMessage of the given data_length. */
    public StatusMessage(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new StatusMessage with the given data_length
     * and base offset.
     */
    public StatusMessage(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new StatusMessage using the given byte array
     * as backing store.
     */
    public StatusMessage(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new StatusMessage using the given byte array
     * as backing store, with the given base offset.
     */
    public StatusMessage(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new StatusMessage using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public StatusMessage(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new StatusMessage embedded in the given message
     * at the given base offset.
     */
    public StatusMessage(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new StatusMessage embedded in the given message
     * at the given base offset and length.
     */
    public StatusMessage(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <StatusMessage> \n";
      try {
        s += "  [ledStat=0x"+Long.toHexString(get_ledStat())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [radioStat=0x"+Long.toHexString(get_radioStat())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [senseStat=0x"+Long.toHexString(get_senseStat())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nodeId=0x"+Long.toHexString(get_nodeId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [counter=0x"+Long.toHexString(get_counter())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ledStat
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ledStat' is signed (false).
     */
    public static boolean isSigned_ledStat() {
        return false;
    }

    /**
     * Return whether the field 'ledStat' is an array (false).
     */
    public static boolean isArray_ledStat() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ledStat'
     */
    public static int offset_ledStat() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ledStat'
     */
    public static int offsetBits_ledStat() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'ledStat'
     */
    public int get_ledStat() {
        return (int)getUIntBEElement(offsetBits_ledStat(), 16);
    }

    /**
     * Set the value of the field 'ledStat'
     */
    public void set_ledStat(int value) {
        setUIntBEElement(offsetBits_ledStat(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'ledStat'
     */
    public static int size_ledStat() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ledStat'
     */
    public static int sizeBits_ledStat() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: radioStat
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'radioStat' is signed (false).
     */
    public static boolean isSigned_radioStat() {
        return false;
    }

    /**
     * Return whether the field 'radioStat' is an array (false).
     */
    public static boolean isArray_radioStat() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'radioStat'
     */
    public static int offset_radioStat() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'radioStat'
     */
    public static int offsetBits_radioStat() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'radioStat'
     */
    public int get_radioStat() {
        return (int)getUIntBEElement(offsetBits_radioStat(), 16);
    }

    /**
     * Set the value of the field 'radioStat'
     */
    public void set_radioStat(int value) {
        setUIntBEElement(offsetBits_radioStat(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'radioStat'
     */
    public static int size_radioStat() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'radioStat'
     */
    public static int sizeBits_radioStat() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: senseStat
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'senseStat' is signed (false).
     */
    public static boolean isSigned_senseStat() {
        return false;
    }

    /**
     * Return whether the field 'senseStat' is an array (false).
     */
    public static boolean isArray_senseStat() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'senseStat'
     */
    public static int offset_senseStat() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'senseStat'
     */
    public static int offsetBits_senseStat() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'senseStat'
     */
    public int get_senseStat() {
        return (int)getUIntBEElement(offsetBits_senseStat(), 16);
    }

    /**
     * Set the value of the field 'senseStat'
     */
    public void set_senseStat(int value) {
        setUIntBEElement(offsetBits_senseStat(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'senseStat'
     */
    public static int size_senseStat() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'senseStat'
     */
    public static int sizeBits_senseStat() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeId
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeId' is signed (false).
     */
    public static boolean isSigned_nodeId() {
        return false;
    }

    /**
     * Return whether the field 'nodeId' is an array (false).
     */
    public static boolean isArray_nodeId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeId'
     */
    public static int offset_nodeId() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeId'
     */
    public static int offsetBits_nodeId() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'nodeId'
     */
    public int get_nodeId() {
        return (int)getUIntBEElement(offsetBits_nodeId(), 16);
    }

    /**
     * Set the value of the field 'nodeId'
     */
    public void set_nodeId(int value) {
        setUIntBEElement(offsetBits_nodeId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeId'
     */
    public static int size_nodeId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeId'
     */
    public static int sizeBits_nodeId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: counter
    //   Field type: long, unsigned
    //   Offset (bits): 64
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'counter' is signed (false).
     */
    public static boolean isSigned_counter() {
        return false;
    }

    /**
     * Return whether the field 'counter' is an array (false).
     */
    public static boolean isArray_counter() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'counter'
     */
    public static int offset_counter() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'counter'
     */
    public static int offsetBits_counter() {
        return 64;
    }

    /**
     * Return the value (as a long) of the field 'counter'
     */
    public long get_counter() {
        return (long)getUIntBEElement(offsetBits_counter(), 32);
    }

    /**
     * Set the value of the field 'counter'
     */
    public void set_counter(long value) {
        setUIntBEElement(offsetBits_counter(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'counter'
     */
    public static int size_counter() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'counter'
     */
    public static int sizeBits_counter() {
        return 32;
    }

}
